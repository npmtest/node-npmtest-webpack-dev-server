{"/home/travis/build/npmtest/node-npmtest-webpack-dev-server/test.js":"/* istanbul instrument in package npmtest_webpack_dev_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-server/lib.npmtest_webpack_dev_server.js":"/* istanbul instrument in package npmtest_webpack_dev_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webpack_dev_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webpack_dev_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webpack-dev-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webpack_dev_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webpack_dev_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webpack_dev_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_webpack_dev_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webpack_dev_server.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_webpack_dev_server.__dirname +\n                    '/lib.npmtest_webpack_dev_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-server/webpack-dev-server/lib/Server.js":"\"use strict\";\n\nconst fs = require(\"fs\");\nconst chokidar = require(\"chokidar\");\nconst path = require(\"path\");\nconst webpackDevMiddleware = require(\"webpack-dev-middleware\");\nconst express = require(\"express\");\nconst compress = require(\"compression\");\nconst sockjs = require(\"sockjs\");\nconst http = require(\"http\");\nconst spdy = require(\"spdy\");\nconst httpProxyMiddleware = require(\"http-proxy-middleware\");\nconst serveIndex = require(\"serve-index\");\nconst historyApiFallback = require(\"connect-history-api-fallback\");\nconst webpack = require(\"webpack\");\nconst OptionsValidationError = require(\"./OptionsValidationError\");\nconst optionsSchema = require(\"./optionsSchema.json\");\n\nconst clientStats = { errorDetails: false };\n\nfunction Server(compiler, options) {\n\t// Default options\n\tif(!options) options = {};\n\n\tconst validationErrors = webpack.validateSchema(optionsSchema, options);\n\tif(validationErrors.length) {\n\t\tthrow new OptionsValidationError(validationErrors);\n\t}\n\n\tif(options.lazy && !options.filename) {\n\t\tthrow new Error(\"'filename' option must be set in lazy mode.\");\n\t}\n\n\tthis.hot = options.hot || options.hotOnly;\n\tthis.headers = options.headers;\n\tthis.clientLogLevel = options.clientLogLevel;\n\tthis.clientOverlay = options.overlay;\n\tthis.sockets = [];\n\tthis.contentBaseWatchers = [];\n\n\t// Listening for events\n\tconst invalidPlugin = () => {\n\t\tthis.sockWrite(this.sockets, \"invalid\");\n\t};\n\tcompiler.plugin(\"compile\", invalidPlugin);\n\tcompiler.plugin(\"invalid\", invalidPlugin);\n\tcompiler.plugin(\"done\", (stats) => {\n\t\tthis._sendStats(this.sockets, stats.toJson(clientStats));\n\t\tthis._stats = stats;\n\t});\n\n\t// Init express server\n\tconst app = this.app = new express();\n\n\t// middleware for serving webpack bundle\n\tthis.middleware = webpackDevMiddleware(compiler, options);\n\n\tapp.get(\"/__webpack_dev_server__/live.bundle.js\", (req, res) => {\n\t\tres.setHeader(\"Content-Type\", \"application/javascript\");\n\t\tfs.createReadStream(path.join(__dirname, \"..\", \"client\", \"live.bundle.js\")).pipe(res);\n\t});\n\n\tapp.get(\"/__webpack_dev_server__/sockjs.bundle.js\", (req, res) => {\n\t\tres.setHeader(\"Content-Type\", \"application/javascript\");\n\t\tfs.createReadStream(path.join(__dirname, \"..\", \"client\", \"sockjs.bundle.js\")).pipe(res);\n\t});\n\n\tapp.get(\"/webpack-dev-server.js\", (req, res) => {\n\t\tres.setHeader(\"Content-Type\", \"application/javascript\");\n\t\tfs.createReadStream(path.join(__dirname, \"..\", \"client\", \"index.bundle.js\")).pipe(res);\n\t});\n\n\tapp.get(\"/webpack-dev-server/*\", (req, res) => {\n\t\tres.setHeader(\"Content-Type\", \"text/html\");\n\t\tfs.createReadStream(path.join(__dirname, \"..\", \"client\", \"live.html\")).pipe(res);\n\t});\n\n\tapp.get(\"/webpack-dev-server\", (req, res) => {\n\t\tres.setHeader(\"Content-Type\", \"text/html\");\n\t\t/* eslint-disable quotes */\n\t\tres.write('<!DOCTYPE html><html><head><meta charset=\"utf-8\"/></head><body>');\n\t\tconst path = this.middleware.getFilenameFromUrl(options.publicPath || \"/\");\n\t\tconst fs = this.middleware.fileSystem;\n\n\t\tfunction writeDirectory(baseUrl, basePath) {\n\t\t\tconst content = fs.readdirSync(basePath);\n\t\t\tres.write(\"<ul>\");\n\t\t\tcontent.forEach(function(item) {\n\t\t\t\tconst p = `${basePath}/${item}`;\n\t\t\t\tif(fs.statSync(p).isFile()) {\n\t\t\t\t\tres.write('<li><a href=\"');\n\t\t\t\t\tres.write(baseUrl + item);\n\t\t\t\t\tres.write('\">');\n\t\t\t\t\tres.write(item);\n\t\t\t\t\tres.write('</a></li>');\n\t\t\t\t\tif(/\\.js$/.test(item)) {\n\t\t\t\t\t\tconst htmlItem = item.substr(0, item.length - 3);\n\t\t\t\t\t\tres.write('<li><a href=\"');\n\t\t\t\t\t\tres.write(baseUrl + htmlItem);\n\t\t\t\t\t\tres.write('\">');\n\t\t\t\t\t\tres.write(htmlItem);\n\t\t\t\t\t\tres.write('</a> (magic html for ');\n\t\t\t\t\t\tres.write(item);\n\t\t\t\t\t\tres.write(') (<a href=\"');\n\t\t\t\t\t\tres.write(baseUrl.replace(/(^(https?:\\/\\/[^\\/]+)?\\/)/, \"$1webpack-dev-server/\") + htmlItem);\n\t\t\t\t\t\tres.write('\">webpack-dev-server</a>)</li>');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres.write('<li>');\n\t\t\t\t\tres.write(item);\n\t\t\t\t\tres.write('<br>');\n\t\t\t\t\twriteDirectory(`${baseUrl + item}/`, p);\n\t\t\t\t\tres.write('</li>');\n\t\t\t\t}\n\t\t\t});\n\t\t\tres.write(\"</ul>\");\n\t\t}\n\t\t/* eslint-enable quotes */\n\t\twriteDirectory(options.publicPath || \"/\", path);\n\t\tres.end(\"</body></html>\");\n\t});\n\n\tlet contentBase;\n\tif(options.contentBase !== undefined) {\n\t\tcontentBase = options.contentBase;\n\t} else {\n\t\tcontentBase = process.cwd();\n\t}\n\n\t// Keep track of websocket proxies for external websocket upgrade.\n\tconst websocketProxies = [];\n\n\tconst features = {\n\t\tcompress() {\n\t\t\tif(options.compress) {\n\t\t\t\t// Enable gzip compression.\n\t\t\t\tapp.use(compress());\n\t\t\t}\n\t\t},\n\n\t\tproxy() {\n\t\t\tif(options.proxy) {\n\t\t\t\t/**\n\t\t\t\t * Assume a proxy configuration specified as:\n\t\t\t\t * proxy: {\n\t\t\t\t *   'context': { options }\n\t\t\t\t * }\n\t\t\t\t * OR\n\t\t\t\t * proxy: {\n\t\t\t\t *   'context': 'target'\n\t\t\t\t * }\n\t\t\t\t */\n\t\t\t\tif(!Array.isArray(options.proxy)) {\n\t\t\t\t\toptions.proxy = Object.keys(options.proxy).map((context) => {\n\t\t\t\t\t\tlet proxyOptions;\n\t\t\t\t\t\t// For backwards compatibility reasons.\n\t\t\t\t\t\tconst correctedContext = context.replace(/^\\*$/, \"**\").replace(/\\/\\*$/, \"\");\n\n\t\t\t\t\t\tif(typeof options.proxy[context] === \"string\") {\n\t\t\t\t\t\t\tproxyOptions = {\n\t\t\t\t\t\t\t\tcontext: correctedContext,\n\t\t\t\t\t\t\t\ttarget: options.proxy[context]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tproxyOptions = Object.assign({}, options.proxy[context]);\n\t\t\t\t\t\t\tproxyOptions.context = correctedContext;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tproxyOptions.logLevel = proxyOptions.logLevel || \"warn\";\n\n\t\t\t\t\t\treturn proxyOptions;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst getProxyMiddleware = (proxyConfig) => {\n\t\t\t\t\tconst context = proxyConfig.context || proxyConfig.path;\n\n\t\t\t\t\t// It is possible to use the `bypass` method without a `target`.\n\t\t\t\t\t// However, the proxy middleware has no use in this case, and will fail to instantiate.\n\t\t\t\t\tif(proxyConfig.target) {\n\t\t\t\t\t\treturn httpProxyMiddleware(context, proxyConfig);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Assume a proxy configuration specified as:\n\t\t\t\t * proxy: [\n\t\t\t\t *   {\n\t\t\t\t *     context: ...,\n\t\t\t\t *     ...options...\n\t\t\t\t *   },\n\t\t\t\t *   // or:\n\t\t\t\t *   function() {\n\t\t\t\t *     return {\n\t\t\t\t *       context: ...,\n\t\t\t\t *       ...options...\n\t\t\t\t *     };\n\t\t\t\t *\t }\n\t\t\t\t * ]\n\t\t\t\t */\n\t\t\t\toptions.proxy.forEach((proxyConfigOrCallback) => {\n\t\t\t\t\tlet proxyConfig;\n\t\t\t\t\tlet proxyMiddleware;\n\n\t\t\t\t\tif(typeof proxyConfigOrCallback === \"function\") {\n\t\t\t\t\t\tproxyConfig = proxyConfigOrCallback();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproxyConfig = proxyConfigOrCallback;\n\t\t\t\t\t}\n\n\t\t\t\t\tproxyMiddleware = getProxyMiddleware(proxyConfig);\n\t\t\t\t\tif(proxyConfig.ws) {\n\t\t\t\t\t\twebsocketProxies.push(proxyMiddleware);\n\t\t\t\t\t}\n\n\t\t\t\t\tapp.use((req, res, next) => {\n\t\t\t\t\t\tif(typeof proxyConfigOrCallback === \"function\") {\n\t\t\t\t\t\t\tconst newProxyConfig = proxyConfigOrCallback();\n\t\t\t\t\t\t\tif(newProxyConfig !== proxyConfig) {\n\t\t\t\t\t\t\t\tproxyConfig = newProxyConfig;\n\t\t\t\t\t\t\t\tproxyMiddleware = getProxyMiddleware(proxyConfig);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst bypass = typeof proxyConfig.bypass === \"function\";\n\t\t\t\t\t\tconst bypassUrl = bypass && proxyConfig.bypass(req, res, proxyConfig) || false;\n\n\t\t\t\t\t\tif(bypassUrl) {\n\t\t\t\t\t\t\treq.url = bypassUrl;\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t} else if(proxyMiddleware) {\n\t\t\t\t\t\t\treturn proxyMiddleware(req, res, next);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\thistoryApiFallback() {\n\t\t\tif(options.historyApiFallback) {\n\t\t\t\t// Fall back to /index.html if nothing else matches.\n\t\t\t\tapp.use(\n\t\t\t\t\thistoryApiFallback(typeof options.historyApiFallback === \"object\" ? options.historyApiFallback : null)\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\n\t\tcontentBaseFiles() {\n\t\t\tif(Array.isArray(contentBase)) {\n\t\t\t\tcontentBase.forEach((item) => {\n\t\t\t\t\tapp.get(\"*\", express.static(item));\n\t\t\t\t});\n\t\t\t} else if(/^(https?:)?\\/\\//.test(contentBase)) {\n\t\t\t\tconsole.log(\"Using a URL as contentBase is deprecated and will be removed in the next major version. Please use the proxy option instead.\");\n\t\t\t\tconsole.log('proxy: {\\n\\t\"*\": \"<your current contentBase configuration>\"\\n}'); // eslint-disable-line quotes\n\t\t\t\t// Redirect every request to contentBase\n\t\t\t\tapp.get(\"*\", (req, res) => {\n\t\t\t\t\tres.writeHead(302, {\n\t\t\t\t\t\t\"Location\": contentBase + req.path + (req._parsedUrl.search || \"\")\n\t\t\t\t\t});\n\t\t\t\t\tres.end();\n\t\t\t\t});\n\t\t\t} else if(typeof contentBase === \"number\") {\n\t\t\t\tconsole.log(\"Using a number as contentBase is deprecated and will be removed in the next major version. Please use the proxy option instead.\");\n\t\t\t\tconsole.log('proxy: {\\n\\t\"*\": \"//localhost:<your current contentBase configuration>\"\\n}'); // eslint-disable-line quotes\n\t\t\t\t// Redirect every request to the port contentBase\n\t\t\t\tapp.get(\"*\", (req, res) => {\n\t\t\t\t\tres.writeHead(302, {\n\t\t\t\t\t\t\"Location\": `//localhost:${contentBase}${req.path}${req._parsedUrl.search || \"\"}`\n\t\t\t\t\t});\n\t\t\t\t\tres.end();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// route content request\n\t\t\t\tapp.get(\"*\", express.static(contentBase, options.staticOptions));\n\t\t\t}\n\t\t},\n\n\t\tcontentBaseIndex() {\n\t\t\tif(Array.isArray(contentBase)) {\n\t\t\t\tcontentBase.forEach((item) => {\n\t\t\t\t\tapp.get(\"*\", serveIndex(item));\n\t\t\t\t});\n\t\t\t} else if(!/^(https?:)?\\/\\//.test(contentBase) && typeof contentBase !== \"number\") {\n\t\t\t\tapp.get(\"*\", serveIndex(contentBase));\n\t\t\t}\n\t\t},\n\n\t\twatchContentBase: () => {\n\t\t\tif(/^(https?:)?\\/\\//.test(contentBase) || typeof contentBase === \"number\") {\n\t\t\t\tthrow new Error(\"Watching remote files is not supported.\");\n\t\t\t} else if(Array.isArray(contentBase)) {\n\t\t\t\tcontentBase.forEach((item) => {\n\t\t\t\t\tthis._watch(item);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._watch(contentBase);\n\t\t\t}\n\t\t},\n\n\t\tmiddleware: () => {\n\t\t\t// include our middleware to ensure it is able to handle '/index.html' request after redirect\n\t\t\tapp.use(this.middleware);\n\t\t},\n\n\t\theaders: () => {\n\t\t\tapp.all(\"*\", this.setContentHeaders.bind(this));\n\t\t},\n\n\t\tmagicHtml: () => {\n\t\t\tapp.get(\"*\", this.serveMagicHtml.bind(this));\n\t\t},\n\n\t\tsetup: () => {\n\t\t\tif(typeof options.setup === \"function\")\n\t\t\t\toptions.setup(app, this);\n\t\t}\n\t};\n\n\tconst defaultFeatures = [\"setup\", \"headers\", \"middleware\"];\n\tif(options.proxy)\n\t\tdefaultFeatures.push(\"proxy\", \"middleware\");\n\tif(contentBase !== false)\n\t\tdefaultFeatures.push(\"contentBaseFiles\");\n\tif(options.watchContentBase)\n\t\tdefaultFeatures.push(\"watchContentBase\");\n\tif(options.historyApiFallback) {\n\t\tdefaultFeatures.push(\"historyApiFallback\", \"middleware\");\n\t\tif(contentBase !== false)\n\t\t\tdefaultFeatures.push(\"contentBaseFiles\");\n\t}\n\tdefaultFeatures.push(\"magicHtml\");\n\tif(contentBase !== false)\n\t\tdefaultFeatures.push(\"contentBaseIndex\");\n\t// compress is placed last and uses unshift so that it will be the first middleware used\n\tif(options.compress)\n\t\tdefaultFeatures.unshift(\"compress\");\n\n\t(options.features || defaultFeatures).forEach((feature) => {\n\t\tfeatures[feature]();\n\t});\n\n\tif(options.https) {\n\t\t// for keep supporting CLI parameters\n\t\tif(typeof options.https === \"boolean\") {\n\t\t\toptions.https = {\n\t\t\t\tkey: options.key,\n\t\t\t\tcert: options.cert,\n\t\t\t\tca: options.ca,\n\t\t\t\tpfx: options.pfx,\n\t\t\t\tpassphrase: options.pfxPassphrase\n\t\t\t};\n\t\t}\n\n\t\t// Use built-in self-signed certificate if no certificate was configured\n\t\tconst fakeCert = fs.readFileSync(path.join(__dirname, \"../ssl/server.pem\"));\n\t\toptions.https.key = options.https.key || fakeCert;\n\t\toptions.https.cert = options.https.cert || fakeCert;\n\n\t\tif(!options.https.spdy) {\n\t\t\toptions.https.spdy = {\n\t\t\t\tprotocols: [\"h2\", \"http/1.1\"]\n\t\t\t};\n\t\t}\n\n\t\tthis.listeningApp = spdy.createServer(options.https, app);\n\t} else {\n\t\tthis.listeningApp = http.createServer(app);\n\t}\n\n\t// Proxy websockets without the initial http request\n\t// https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade\n\twebsocketProxies.forEach(function(wsProxy) {\n\t\tthis.listeningApp.on(\"upgrade\", wsProxy.upgrade);\n\t}, this);\n}\n\nServer.prototype.use = function() {\n\tthis.app.use.apply(this.app, arguments);\n}\n\nServer.prototype.setContentHeaders = function(req, res, next) {\n\tif(this.headers) {\n\t\tfor(const name in this.headers) {\n\t\t\tres.setHeader(name, this.headers[name]);\n\t\t}\n\t}\n\n\tnext();\n}\n\n// delegate listen call and init sockjs\nServer.prototype.listen = function() {\n\tconst returnValue = this.listeningApp.listen.apply(this.listeningApp, arguments);\n\tconst sockServer = sockjs.createServer({\n\t\t// Use provided up-to-date sockjs-client\n\t\tsockjs_url: \"/__webpack_dev_server__/sockjs.bundle.js\",\n\t\t// Limit useless logs\n\t\tlog: function(severity, line) {\n\t\t\tif(severity === \"error\") {\n\t\t\t\tconsole.log(line);\n\t\t\t}\n\t\t}\n\t});\n\tsockServer.on(\"connection\", (conn) => {\n\t\tif(!conn) return;\n\t\tthis.sockets.push(conn);\n\n\t\tconn.on(\"close\", () => {\n\t\t\tconst connIndex = this.sockets.indexOf(conn);\n\t\t\tif(connIndex >= 0) {\n\t\t\t\tthis.sockets.splice(connIndex, 1);\n\t\t\t}\n\t\t});\n\n\t\tif(this.clientLogLevel)\n\t\t\tthis.sockWrite([conn], \"log-level\", this.clientLogLevel);\n\n\t\tif(this.clientOverlay)\n\t\t\tthis.sockWrite([conn], \"overlay\", this.clientOverlay);\n\n\t\tif(this.hot) this.sockWrite([conn], \"hot\");\n\n\t\tif(!this._stats) return;\n\t\tthis._sendStats([conn], this._stats.toJson(clientStats), true);\n\t});\n\n\tsockServer.installHandlers(this.listeningApp, {\n\t\tprefix: \"/sockjs-node\"\n\t});\n\treturn returnValue;\n}\n\nServer.prototype.close = function(callback) {\n\tthis.sockets.forEach((sock) => {\n\t\tsock.close();\n\t});\n\tthis.sockets = [];\n\tthis.listeningApp.close(() => {\n\t\tthis.middleware.close(callback);\n\t});\n\n\tthis.contentBaseWatchers.forEach((watcher) => {\n\t\twatcher.close();\n\t});\n\tthis.contentBaseWatchers = [];\n}\n\nServer.prototype.sockWrite = function(sockets, type, data) {\n\tsockets.forEach((sock) => {\n\t\tsock.write(JSON.stringify({\n\t\t\ttype: type,\n\t\t\tdata: data\n\t\t}));\n\t});\n}\n\nServer.prototype.serveMagicHtml = function(req, res, next) {\n\tconst _path = req.path;\n\ttry {\n\t\tif(!this.middleware.fileSystem.statSync(this.middleware.getFilenameFromUrl(`${_path}.js`)).isFile())\n\t\t\treturn next();\n\t\t// Serve a page that executes the javascript\n\t\t/* eslint-disable quotes */\n\t\tres.write('<!DOCTYPE html><html><head><meta charset=\"utf-8\"/></head><body><script type=\"text/javascript\" charset=\"utf-8\" src=\"');\n\t\tres.write(_path);\n\t\tres.write('.js');\n\t\tres.write(req._parsedUrl.search || \"\");\n\t\tres.end('\"></script></body></html>');\n\t\t/* eslint-enable quotes */\n\t} catch(e) {\n\t\treturn next();\n\t}\n}\n\n// send stats to a socket or multiple sockets\nServer.prototype._sendStats = function(sockets, stats, force) {\n\tif(!force &&\n\t\tstats &&\n\t\t(!stats.errors || stats.errors.length === 0) &&\n\t\tstats.assets &&\n\t\tstats.assets.every((asset) => !asset.emitted)\n\t)\n\t\treturn this.sockWrite(sockets, \"still-ok\");\n\tthis.sockWrite(sockets, \"hash\", stats.hash);\n\tif(stats.errors.length > 0)\n\t\tthis.sockWrite(sockets, \"errors\", stats.errors);\n\telse if(stats.warnings.length > 0)\n\t\tthis.sockWrite(sockets, \"warnings\", stats.warnings);\n\telse\n\t\tthis.sockWrite(sockets, \"ok\");\n}\n\nServer.prototype._watch = function(path) {\n\tconst watcher = chokidar.watch(path).on(\"change\", () => {\n\t\tthis.sockWrite(this.sockets, \"content-changed\");\n\t});\n\n\tthis.contentBaseWatchers.push(watcher);\n}\n\nServer.prototype.invalidate = function() {\n\tif(this.middleware) this.middleware.invalidate();\n}\n\n// Export this logic, so that other implementations, like task-runners can use it\nServer.addDevServerEntrypoints = require(\"./util/addDevServerEntrypoints\");\n\nmodule.exports = Server;\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-server/webpack-dev-server/lib/OptionsValidationError.js":"\"use strict\";\n\nconst optionsSchema = require(\"./optionsSchema.json\");\n\nconst getSchemaPart = (path, parents, additionalPath) => {\n\tparents = parents || 0;\n\tpath = path.split(\"/\");\n\tpath = path.slice(0, path.length - parents);\n\tif(additionalPath) {\n\t\tadditionalPath = additionalPath.split(\"/\");\n\t\tpath = path.concat(additionalPath);\n\t}\n\tlet schemaPart = optionsSchema;\n\tfor(let i = 1; i < path.length; i++) {\n\t\tconst inner = schemaPart[path[i]];\n\t\tif(inner)\n\t\t\tschemaPart = inner;\n\t}\n\treturn schemaPart;\n};\n\nconst getSchemaPartText = (schemaPart, additionalPath) => {\n\tif(additionalPath) {\n\t\tfor(let i = 0; i < additionalPath.length; i++) {\n\t\t\tconst inner = schemaPart[additionalPath[i]];\n\t\t\tif(inner)\n\t\t\t\tschemaPart = inner;\n\t\t}\n\t}\n\twhile(schemaPart.$ref) schemaPart = getSchemaPart(schemaPart.$ref);\n\tlet schemaText = OptionsValidationError.formatSchema(schemaPart);\n\tif(schemaPart.description)\n\t\tschemaText += `\\n${schemaPart.description}`;\n\treturn schemaText;\n};\n\nconst indent = (str, prefix, firstLine) => {\n\tif(firstLine) {\n\t\treturn prefix + str.replace(/\\n(?!$)/g, \"\\n\" + prefix);\n\t} else {\n\t\treturn str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n\t}\n};\n\nclass OptionsValidationError extends Error {\n\n\tconstructor(validationErrors) {\n\t\tsuper();\n\n\t\tif(Error.hasOwnProperty(\"captureStackTrace\")) {\n\t\t\tError.captureStackTrace(this, this.constructor);\n\t\t}\n\t\tthis.name = \"WebpackDevServerOptionsValidationError\";\n\n\t\tthis.message = \"Invalid configuration object. \" +\n\t\t\t\"webpack-dev-server has been initialised using a configuration object that does not match the API schema.\\n\" +\n\t\t\tvalidationErrors.map(err => \" - \" + indent(OptionsValidationError.formatValidationError(err), \"   \", false)).join(\"\\n\");\n\t\tthis.validationErrors = validationErrors;\n\t}\n\n\tstatic formatSchema(schema, prevSchemas) {\n\t\tprevSchemas = prevSchemas || [];\n\n\t\tconst formatInnerSchema = (innerSchema, addSelf) => {\n\t\t\tif(!addSelf) return OptionsValidationError.formatSchema(innerSchema, prevSchemas);\n\t\t\tif(prevSchemas.indexOf(innerSchema) >= 0) return \"(recursive)\";\n\t\t\treturn OptionsValidationError.formatSchema(innerSchema, prevSchemas.concat(schema));\n\t\t};\n\n\t\tif(schema.type === \"string\") {\n\t\t\tif(schema.minLength === 1)\n\t\t\t\treturn \"non-empty string\";\n\t\t\telse if(schema.minLength > 1)\n\t\t\t\treturn `string (min length ${schema.minLength})`;\n\t\t\treturn \"string\";\n\t\t} else if(schema.type === \"boolean\") {\n\t\t\treturn \"boolean\";\n\t\t} else if(schema.type === \"number\") {\n\t\t\treturn \"number\";\n\t\t} else if(schema.type === \"object\") {\n\t\t\tif(schema.properties) {\n\t\t\t\tconst required = schema.required || [];\n\t\t\t\treturn `object { ${Object.keys(schema.properties).map(property => {\n\t\t\t\t\tif(required.indexOf(property) < 0) return property + \"?\";\n\t\t\t\t\treturn property;\n\t\t\t\t}).concat(schema.additionalProperties ? [\"...\"] : []).join(\", \")} }`;\n\t\t\t}\n\t\t\tif(schema.additionalProperties) {\n\t\t\t\treturn `object { <key>: ${formatInnerSchema(schema.additionalProperties)} }`;\n\t\t\t}\n\t\t\treturn \"object\";\n\t\t} else if(schema.type === \"array\") {\n\t\t\treturn `[${formatInnerSchema(schema.items)}]`;\n\t\t}\n\n\t\tswitch(schema.instanceof) {\n\t\t\tcase \"Function\":\n\t\t\t\treturn \"function\";\n\t\t\tcase \"RegExp\":\n\t\t\t\treturn \"RegExp\";\n\t\t}\n\t\tif(schema.$ref) return formatInnerSchema(getSchemaPart(schema.$ref), true);\n\t\tif(schema.allOf) return schema.allOf.map(formatInnerSchema).join(\" & \");\n\t\tif(schema.oneOf) return schema.oneOf.map(formatInnerSchema).join(\" | \");\n\t\tif(schema.anyOf) return schema.anyOf.map(formatInnerSchema).join(\" | \");\n\t\tif(schema.enum) return schema.enum.map(item => JSON.stringify(item)).join(\" | \");\n\t\treturn JSON.stringify(schema, 0, 2);\n\t}\n\n\tstatic formatValidationError(err) {\n\t\tconst dataPath = `configuration${err.dataPath}`;\n\t\tif(err.keyword === \"additionalProperties\") {\n\t\t\treturn `${dataPath} has an unknown property '${err.params.additionalProperty}'. These properties are valid:\\n${getSchemaPartText(err.parentSchema)}`;\n\t\t} else if(err.keyword === \"oneOf\" || err.keyword === \"anyOf\") {\n\t\t\tif(err.children && err.children.length > 0) {\n\t\t\t\treturn `${dataPath} should be one of these:\\n${getSchemaPartText(err.parentSchema)}\\n` +\n\t\t\t\t\t`Details:\\n${err.children.map(err => \" * \" + indent(OptionsValidationError.formatValidationError(err), \"   \", false)).join(\"\\n\")}`;\n\t\t\t}\n\t\t\treturn `${dataPath} should be one of these:\\n${getSchemaPartText(err.parentSchema)}`;\n\n\t\t} else if(err.keyword === \"enum\") {\n\t\t\tif(err.parentSchema && err.parentSchema.enum && err.parentSchema.enum.length === 1) {\n\t\t\t\treturn `${dataPath} should be ${getSchemaPartText(err.parentSchema)}`;\n\t\t\t}\n\t\t\treturn `${dataPath} should be one of these:\\n${getSchemaPartText(err.parentSchema)}`;\n\t\t} else if(err.keyword === \"allOf\") {\n\t\t\treturn `${dataPath} should be:\\n${getSchemaPartText(err.parentSchema)}`;\n\t\t} else if(err.keyword === \"type\") {\n\t\t\tswitch(err.params.type) {\n\t\t\t\tcase \"object\":\n\t\t\t\t\treturn `${dataPath} should be an object.`;\n\t\t\t\tcase \"string\":\n\t\t\t\t\treturn `${dataPath} should be a string.`;\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\treturn `${dataPath} should be a boolean.`;\n\t\t\t\tcase \"number\":\n\t\t\t\t\treturn `${dataPath} should be a number.`;\n\t\t\t\tcase \"array\":\n\t\t\t\t\treturn `${dataPath} should be an array:\\n${getSchemaPartText(err.parentSchema)}`;\n\t\t\t}\n\t\t\treturn `${dataPath} should be ${err.params.type}:\\n${getSchemaPartText(err.parentSchema)}`;\n\t\t} else if(err.keyword === \"instanceof\") {\n\t\t\treturn `${dataPath} should be an instance of ${getSchemaPartText(err.parentSchema)}.`;\n\t\t} else if(err.keyword === \"required\") {\n\t\t\tconst missingProperty = err.params.missingProperty.replace(/^\\./, \"\");\n\t\t\treturn `${dataPath} misses the property '${missingProperty}'.\\n${getSchemaPartText(err.parentSchema, [\"properties\", missingProperty])}`;\n\t\t} else if(err.keyword === \"minLength\" || err.keyword === \"minItems\") {\n\t\t\tif(err.params.limit === 1)\n\t\t\t\treturn `${dataPath} should not be empty.`;\n\t\t\telse\n\t\t\t\treturn `${dataPath} ${err.message}`;\n\t\t} else {\n\t\t\t// eslint-disable-line no-fallthrough\n\t\t\treturn `${dataPath} ${err.message} (${JSON.stringify(err, 0, 2)}).\\n${getSchemaPartText(err.parentSchema)}`;\n\t\t}\n\t}\n}\n\nmodule.exports = OptionsValidationError;\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-server/webpack-dev-server/lib/util/addDevServerEntrypoints.js":"\"use strict\";\nconst createDomain = require(\"./createDomain\");\n\nmodule.exports = function addDevServerEntrypoints(webpackOptions, devServerOptions) {\n\tif(devServerOptions.inline !== false) {\n\t\tconst domain = createDomain(devServerOptions);\n\t\tconst devClient = [`${require.resolve(\"../../client/\")}?${domain}`];\n\n\t\tif(devServerOptions.hotOnly)\n\t\t\tdevClient.push(\"webpack/hot/only-dev-server\");\n\t\telse if(devServerOptions.hot)\n\t\t\tdevClient.push(\"webpack/hot/dev-server\");\n\n\t\t[].concat(webpackOptions).forEach((wpOpt) => {\n\t\t\tif(typeof wpOpt.entry === \"object\" && !Array.isArray(wpOpt.entry)) {\n\t\t\t\tObject.keys(wpOpt.entry).forEach((key) => {\n\t\t\t\t\twpOpt.entry[key] = devClient.concat(wpOpt.entry[key]);\n\t\t\t\t});\n\t\t\t} else if(typeof wpOpt.entry === \"function\") {\n\t\t\t\twpOpt.entry = wpOpt.entry(devClient);\n\t\t\t} else {\n\t\t\t\twpOpt.entry = devClient.concat(wpOpt.entry);\n\t\t\t}\n\t\t});\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-webpack-dev-server/webpack-dev-server/lib/util/createDomain.js":"\"use strict\";\nconst url = require(\"url\");\n\nmodule.exports = function createDomain(options) {\n\tconst protocol = options.https ? \"https\" : \"http\";\n\n\t// the formatted domain (url without path) of the webpack server\n\treturn options.public ? `${protocol}://${options.public}` : url.format({\n\t\tprotocol: protocol,\n\t\thostname: options.host,\n\t\tport: options.socket ? 0 : options.port.toString()\n\t});\n};\n"}